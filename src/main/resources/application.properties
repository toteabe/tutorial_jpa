spring.datasource.url=jdbc:mysql://localhost:3307/tutorial_jpa?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=secret
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#datasource
spring.datasource.name=tutorial
spring.datasource.generate-unique-name=false

#jpa
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql=true

spring.jpa.generate-ddl=true
#Control de grano fino de generacion de ddl con hibernate (implementacion de JPA utilizada por spring-data por defecto)
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=create

#VER https://docs.spring.io/spring-data/rest/docs/current-SNAPSHOT/reference/html/#reference
#Para acceder a HAL http://localhost:8080/data-api
spring.data.rest.basePath=/data-api

#TEORiA jpa ddl
#En Spring/Spring-Boot, la base de datos SQL se puede inicializar de diferentes maneras.
#JPA tiene caracteristicas para la generacion de DDL, y estas pueden configurarse para ejecutarse en el inicio contra la base de datos. Esto se controla a traves de dos propiedades externas:
#
#spring.jpa.generate-ddl (booleano) activa y desactiva la funcion y es independiente del proveedor.
#spring.jpa.hibernate.ddl-auto (enum) es una caracteristica de Hibernate que controla el comportamiento de una manera mas detallada. Consulte a continuacion para obtener mas detalles.
#Los valores de propiedad de Hibernate son: create, update, create-drop(default), validate y none:
#
#create: Hibernate primero elimina las tablas existentes y luego crea nuevas tablas
#upate: el modelo de objeto creado en funcion de las asignaciones (anotaciones o XML) se compara con el esquema existente y luego Hibernate actualiza el esquema de acuerdo con la diferencia. Nunca elimina las tablas o columnas existentes, incluso si la aplicacion ya no las necesita.
#create-drop: similar a create, con la adicion de que Hibernate eliminara la base de datos despues de que se completen todas las operaciones. Normalmente se utiliza para pruebas unitarias.
#validate: Hibernate solo valida si las tablas y columnas existen; de lo contrario, arroja una excepcion
#none: este valor apaga efectivamente la generacion de DDL. Recomendable para entorno de produccion.

#jackson
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
#formatting
#spring.jpa.properties.hibernate.format_sql=true
#printing parameter values in order
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type=TRACE
#logging.level.org.hibernate.type.descriptor.sql=trace
# logs the SQL statements
#log4j.logger.org.hibernate.SQL=debug

# Logs the JDBC parameters passed to a query
#log4j.logger.org.hibernate.type=trace
